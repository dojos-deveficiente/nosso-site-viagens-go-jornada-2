// Code generated by goa v3.2.5, DO NOT EDIT.
//
// Decolar HTTP client CLI support package
//
// Command:
// $ goa gen github.com/selmison/dojo-1/design

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	"github.com/go-kit/kit/endpoint"
	decolarc "github.com/selmison/dojo-1/gen/http/decolar/client"
	goahttp "goa.design/goa/v3/http"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//    command (subcommand1|subcommand2|...)
//
func UsageCommands() string {
	return `decolar (create-pais|create-compania)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` decolar create-pais --body '{
      "nome": "Ipsam sed saepe assumenda tempore."
   }'` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (endpoint.Endpoint, interface{}, error) {
	var (
		decolarFlags = flag.NewFlagSet("decolar", flag.ContinueOnError)

		decolarCreatePaisFlags    = flag.NewFlagSet("create-pais", flag.ExitOnError)
		decolarCreatePaisBodyFlag = decolarCreatePaisFlags.String("body", "REQUIRED", "")

		decolarCreateCompaniaFlags    = flag.NewFlagSet("create-compania", flag.ExitOnError)
		decolarCreateCompaniaBodyFlag = decolarCreateCompaniaFlags.String("body", "REQUIRED", "")
	)
	decolarFlags.Usage = decolarUsage
	decolarCreatePaisFlags.Usage = decolarCreatePaisUsage
	decolarCreateCompaniaFlags.Usage = decolarCreateCompaniaUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "decolar":
			svcf = decolarFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "decolar":
			switch epn {
			case "create-pais":
				epf = decolarCreatePaisFlags

			case "create-compania":
				epf = decolarCreateCompaniaFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint endpoint.Endpoint
		err      error
	)
	{
		switch svcn {
		case "decolar":
			c := decolarc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "create-pais":
				endpoint = c.CreatePais()
				data, err = decolarc.BuildCreatePaisPayload(*decolarCreatePaisBodyFlag)
			case "create-compania":
				endpoint = c.CreateCompania()
				data, err = decolarc.BuildCreateCompaniaPayload(*decolarCreateCompaniaBodyFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// decolarUsage displays the usage of the decolar command and its subcommands.
func decolarUsage() {
	fmt.Fprintf(os.Stderr, `The decolar service
Usage:
    %s [globalflags] decolar COMMAND [flags]

COMMAND:
    create-pais: CreatePais implements create_pais.
    create-compania: CreateCompania implements create_compania.

Additional help:
    %s decolar COMMAND --help
`, os.Args[0], os.Args[0])
}
func decolarCreatePaisUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] decolar create-pais -body JSON

CreatePais implements create_pais.
    -body JSON: 

Example:
    `+os.Args[0]+` decolar create-pais --body '{
      "nome": "Ipsam sed saepe assumenda tempore."
   }'
`, os.Args[0])
}

func decolarCreateCompaniaUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] decolar create-compania -body JSON

CreateCompania implements create_compania.
    -body JSON: 

Example:
    `+os.Args[0]+` decolar create-compania --body '{
      "nome": "5",
      "pais_id": "3F59C655-AFF8-EAB8-FA17-44E154EF0557"
   }'
`, os.Args[0])
}
