// Code generated by goa v3.2.5, DO NOT EDIT.
//
// decolar HTTP server encoders and decoders
//
// Command:
// $ goa gen github.com/selmison/dojo-1/design

package server

import (
	"context"
	"io"
	"net/http"

	decolar "github.com/selmison/dojo-1/gen/decolar"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeCreatePaisResponse returns an encoder for responses returned by the
// decolar create_pais endpoint.
func EncodeCreatePaisResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*decolar.PaisDTO)
		enc := encoder(ctx, w)
		body := NewCreatePaisResponseBody(res)
		w.WriteHeader(http.StatusCreated)
		return enc.Encode(body)
	}
}

// DecodeCreatePaisRequest returns a decoder for requests sent to the decolar
// create_pais endpoint.
func DecodeCreatePaisRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body CreatePaisRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateCreatePaisRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewCreatePaisDTO(&body)

		return payload, nil
	}
}

// EncodeCreatePaisError returns an encoder for errors returned by the
// create_pais decolar endpoint.
func EncodeCreatePaisError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "invalid_fields":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewCreatePaisInvalidFieldsResponseBody(res)
			}
			w.Header().Set("goa-error", "invalid_fields")
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeCreateCompaniaResponse returns an encoder for responses returned by
// the decolar create_compania endpoint.
func EncodeCreateCompaniaResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*decolar.CompaniaDTO)
		enc := encoder(ctx, w)
		body := NewCreateCompaniaResponseBody(res)
		w.WriteHeader(http.StatusCreated)
		return enc.Encode(body)
	}
}

// DecodeCreateCompaniaRequest returns a decoder for requests sent to the
// decolar create_compania endpoint.
func DecodeCreateCompaniaRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body CreateCompaniaRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateCreateCompaniaRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewCreateCompaniaDTO(&body)

		return payload, nil
	}
}

// EncodeCreateCompaniaError returns an encoder for errors returned by the
// create_compania decolar endpoint.
func EncodeCreateCompaniaError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "invalid_fields":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewCreateCompaniaInvalidFieldsResponseBody(res)
			}
			w.Header().Set("goa-error", "invalid_fields")
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeCreateAeroportoResponse returns an encoder for responses returned by
// the decolar create_aeroporto endpoint.
func EncodeCreateAeroportoResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*decolar.AeroportoDTO)
		enc := encoder(ctx, w)
		body := NewCreateAeroportoResponseBody(res)
		w.WriteHeader(http.StatusCreated)
		return enc.Encode(body)
	}
}

// DecodeCreateAeroportoRequest returns a decoder for requests sent to the
// decolar create_aeroporto endpoint.
func DecodeCreateAeroportoRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body CreateAeroportoRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateCreateAeroportoRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewCreateAeroportoDTO(&body)

		return payload, nil
	}
}

// EncodeCreateAeroportoError returns an encoder for errors returned by the
// create_aeroporto decolar endpoint.
func EncodeCreateAeroportoError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "invalid_fields":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewCreateAeroportoInvalidFieldsResponseBody(res)
			}
			w.Header().Set("goa-error", "invalid_fields")
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}
