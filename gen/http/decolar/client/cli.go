// Code generated by goa v3.2.5, DO NOT EDIT.
//
// decolar HTTP client CLI support package
//
// Command:
// $ goa gen github.com/selmison/dojo-1/design

package client

import (
	"encoding/json"
	"fmt"
	"unicode/utf8"

	decolar "github.com/selmison/dojo-1/gen/decolar"
	goa "goa.design/goa/v3/pkg"
)

// BuildCreatePaisPayload builds the payload for the decolar create_pais
// endpoint from CLI flags.
func BuildCreatePaisPayload(decolarCreatePaisBody string) (*decolar.CreatePaisDTO, error) {
	var err error
	var body CreatePaisRequestBody
	{
		err = json.Unmarshal([]byte(decolarCreatePaisBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"nome\": \"Ipsam sed saepe assumenda tempore.\"\n   }'")
		}
	}
	v := &decolar.CreatePaisDTO{
		Nome: body.Nome,
	}

	return v, nil
}

// BuildCreateCompaniaPayload builds the payload for the decolar
// create_compania endpoint from CLI flags.
func BuildCreateCompaniaPayload(decolarCreateCompaniaBody string) (*decolar.CreateCompaniaDTO, error) {
	var err error
	var body CreateCompaniaRequestBody
	{
		err = json.Unmarshal([]byte(decolarCreateCompaniaBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"nome\": \"5\",\n      \"pais_id\": \"3F59C655-AFF8-EAB8-FA17-44E154EF0557\"\n   }'")
		}
		if utf8.RuneCountInString(body.Nome) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.nome", body.Nome, utf8.RuneCountInString(body.Nome), 1, true))
		}
		err = goa.MergeErrors(err, goa.ValidateFormat("body.pais_id", body.PaisID, goa.FormatUUID))

		if err != nil {
			return nil, err
		}
	}
	v := &decolar.CreateCompaniaDTO{
		Nome:   body.Nome,
		PaisID: body.PaisID,
	}

	return v, nil
}
