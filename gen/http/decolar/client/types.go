// Code generated by goa v3.2.5, DO NOT EDIT.
//
// decolar HTTP client types
//
// Command:
// $ goa gen github.com/selmison/dojo-1/design

package client

import (
	decolar "github.com/selmison/dojo-1/gen/decolar"
	goa "goa.design/goa/v3/pkg"
)

// CreatePaisRequestBody is the type of the "decolar" service "create_pais"
// endpoint HTTP request body.
type CreatePaisRequestBody struct {
	Nome string `form:"nome" json:"nome" xml:"nome"`
}

// CreateCompaniaRequestBody is the type of the "decolar" service
// "create_compania" endpoint HTTP request body.
type CreateCompaniaRequestBody struct {
	Nome   string `form:"nome" json:"nome" xml:"nome"`
	PaisID string `form:"pais_id" json:"pais_id" xml:"pais_id"`
}

// CreateAeroportoRequestBody is the type of the "decolar" service
// "create_aeroporto" endpoint HTTP request body.
type CreateAeroportoRequestBody struct {
	Nome   string `form:"nome" json:"nome" xml:"nome"`
	PaisID string `form:"pais_id" json:"pais_id" xml:"pais_id"`
}

// CreatePaisResponseBody is the type of the "decolar" service "create_pais"
// endpoint HTTP response body.
type CreatePaisResponseBody struct {
	ID   *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Nome *string `form:"nome,omitempty" json:"nome,omitempty" xml:"nome,omitempty"`
}

// CreateCompaniaResponseBody is the type of the "decolar" service
// "create_compania" endpoint HTTP response body.
type CreateCompaniaResponseBody struct {
	ID        *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Nome      *string `form:"nome,omitempty" json:"nome,omitempty" xml:"nome,omitempty"`
	PaisID    *string `form:"pais_id,omitempty" json:"pais_id,omitempty" xml:"pais_id,omitempty"`
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
}

// CreateAeroportoResponseBody is the type of the "decolar" service
// "create_aeroporto" endpoint HTTP response body.
type CreateAeroportoResponseBody struct {
	ID        *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Nome      *string `form:"nome,omitempty" json:"nome,omitempty" xml:"nome,omitempty"`
	PaisID    *string `form:"pais_id,omitempty" json:"pais_id,omitempty" xml:"pais_id,omitempty"`
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
}

// CreatePaisInvalidFieldsResponseBody is the type of the "decolar" service
// "create_pais" endpoint HTTP response body for the "invalid_fields" error.
type CreatePaisInvalidFieldsResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// CreateCompaniaInvalidFieldsResponseBody is the type of the "decolar" service
// "create_compania" endpoint HTTP response body for the "invalid_fields" error.
type CreateCompaniaInvalidFieldsResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// CreateAeroportoInvalidFieldsResponseBody is the type of the "decolar"
// service "create_aeroporto" endpoint HTTP response body for the
// "invalid_fields" error.
type CreateAeroportoInvalidFieldsResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// NewCreatePaisRequestBody builds the HTTP request body from the payload of
// the "create_pais" endpoint of the "decolar" service.
func NewCreatePaisRequestBody(p *decolar.CreatePaisDTO) *CreatePaisRequestBody {
	body := &CreatePaisRequestBody{
		Nome: p.Nome,
	}
	return body
}

// NewCreateCompaniaRequestBody builds the HTTP request body from the payload
// of the "create_compania" endpoint of the "decolar" service.
func NewCreateCompaniaRequestBody(p *decolar.CreateCompaniaDTO) *CreateCompaniaRequestBody {
	body := &CreateCompaniaRequestBody{
		Nome:   p.Nome,
		PaisID: p.PaisID,
	}
	return body
}

// NewCreateAeroportoRequestBody builds the HTTP request body from the payload
// of the "create_aeroporto" endpoint of the "decolar" service.
func NewCreateAeroportoRequestBody(p *decolar.CreateAeroportoDTO) *CreateAeroportoRequestBody {
	body := &CreateAeroportoRequestBody{
		Nome:   p.Nome,
		PaisID: p.PaisID,
	}
	return body
}

// NewCreatePaisPaisDTOCreated builds a "decolar" service "create_pais"
// endpoint result from a HTTP "Created" response.
func NewCreatePaisPaisDTOCreated(body *CreatePaisResponseBody) *decolar.PaisDTO {
	v := &decolar.PaisDTO{
		ID:   *body.ID,
		Nome: *body.Nome,
	}

	return v
}

// NewCreatePaisInvalidFields builds a decolar service create_pais endpoint
// invalid_fields error.
func NewCreatePaisInvalidFields(body *CreatePaisInvalidFieldsResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewCreateCompaniaCompaniaDTOCreated builds a "decolar" service
// "create_compania" endpoint result from a HTTP "Created" response.
func NewCreateCompaniaCompaniaDTOCreated(body *CreateCompaniaResponseBody) *decolar.CompaniaDTO {
	v := &decolar.CompaniaDTO{
		ID:        *body.ID,
		Nome:      *body.Nome,
		PaisID:    *body.PaisID,
		CreatedAt: *body.CreatedAt,
	}

	return v
}

// NewCreateCompaniaInvalidFields builds a decolar service create_compania
// endpoint invalid_fields error.
func NewCreateCompaniaInvalidFields(body *CreateCompaniaInvalidFieldsResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewCreateAeroportoAeroportoDTOCreated builds a "decolar" service
// "create_aeroporto" endpoint result from a HTTP "Created" response.
func NewCreateAeroportoAeroportoDTOCreated(body *CreateAeroportoResponseBody) *decolar.AeroportoDTO {
	v := &decolar.AeroportoDTO{
		ID:        *body.ID,
		Nome:      *body.Nome,
		PaisID:    *body.PaisID,
		CreatedAt: *body.CreatedAt,
	}

	return v
}

// NewCreateAeroportoInvalidFields builds a decolar service create_aeroporto
// endpoint invalid_fields error.
func NewCreateAeroportoInvalidFields(body *CreateAeroportoInvalidFieldsResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// ValidateCreatePaisResponseBody runs the validations defined on
// create_pais_response_body
func ValidateCreatePaisResponseBody(body *CreatePaisResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Nome == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("nome", "body"))
	}
	return
}

// ValidateCreateCompaniaResponseBody runs the validations defined on
// create_compania_response_body
func ValidateCreateCompaniaResponseBody(body *CreateCompaniaResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Nome == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("nome", "body"))
	}
	if body.PaisID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("pais_id", "body"))
	}
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_at", "body"))
	}
	return
}

// ValidateCreateAeroportoResponseBody runs the validations defined on
// create_aeroporto_response_body
func ValidateCreateAeroportoResponseBody(body *CreateAeroportoResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Nome == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("nome", "body"))
	}
	if body.PaisID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("pais_id", "body"))
	}
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_at", "body"))
	}
	return
}

// ValidateCreatePaisInvalidFieldsResponseBody runs the validations defined on
// create_pais_invalid_fields_response_body
func ValidateCreatePaisInvalidFieldsResponseBody(body *CreatePaisInvalidFieldsResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateCreateCompaniaInvalidFieldsResponseBody runs the validations defined
// on create_compania_invalid_fields_response_body
func ValidateCreateCompaniaInvalidFieldsResponseBody(body *CreateCompaniaInvalidFieldsResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateCreateAeroportoInvalidFieldsResponseBody runs the validations
// defined on create_aeroporto_invalid_fields_response_body
func ValidateCreateAeroportoInvalidFieldsResponseBody(body *CreateAeroportoInvalidFieldsResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}
