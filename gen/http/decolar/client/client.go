// Code generated by goa v3.2.5, DO NOT EDIT.
//
// decolar client HTTP transport
//
// Command:
// $ goa gen github.com/selmison/dojo-1/design

package client

import (
	"context"
	"net/http"

	"github.com/go-kit/kit/endpoint"
	goahttp "goa.design/goa/v3/http"
)

// Client lists the decolar service endpoint HTTP clients.
type Client struct {
	// CreatePais Doer is the HTTP client used to make requests to the create_pais
	// endpoint.
	CreatePaisDoer goahttp.Doer

	// CreateCompania Doer is the HTTP client used to make requests to the
	// create_compania endpoint.
	CreateCompaniaDoer goahttp.Doer

	// CreateAeroporto Doer is the HTTP client used to make requests to the
	// create_aeroporto endpoint.
	CreateAeroportoDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// NewClient instantiates HTTP clients for all the decolar service servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		CreatePaisDoer:      doer,
		CreateCompaniaDoer:  doer,
		CreateAeroportoDoer: doer,
		RestoreResponseBody: restoreBody,
		scheme:              scheme,
		host:                host,
		decoder:             dec,
		encoder:             enc,
	}
}

// CreatePais returns an endpoint that makes HTTP requests to the decolar
// service create_pais server.
func (c *Client) CreatePais() endpoint.Endpoint {
	var (
		encodeRequest  = EncodeCreatePaisRequest(c.encoder)
		decodeResponse = DecodeCreatePaisResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildCreatePaisRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.CreatePaisDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("decolar", "create_pais", err)
		}
		return decodeResponse(resp)
	}
}

// CreateCompania returns an endpoint that makes HTTP requests to the decolar
// service create_compania server.
func (c *Client) CreateCompania() endpoint.Endpoint {
	var (
		encodeRequest  = EncodeCreateCompaniaRequest(c.encoder)
		decodeResponse = DecodeCreateCompaniaResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildCreateCompaniaRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.CreateCompaniaDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("decolar", "create_compania", err)
		}
		return decodeResponse(resp)
	}
}

// CreateAeroporto returns an endpoint that makes HTTP requests to the decolar
// service create_aeroporto server.
func (c *Client) CreateAeroporto() endpoint.Endpoint {
	var (
		encodeRequest  = EncodeCreateAeroportoRequest(c.encoder)
		decodeResponse = DecodeCreateAeroportoResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildCreateAeroportoRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.CreateAeroportoDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("decolar", "create_aeroporto", err)
		}
		return decodeResponse(resp)
	}
}
