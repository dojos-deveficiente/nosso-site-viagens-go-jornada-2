// Code generated by goa v3.2.5, DO NOT EDIT.
//
// pais HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/selmison/dojo-1/design

package client

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"

	pais "github.com/selmison/dojo-1/gen/pais"
	goahttp "goa.design/goa/v3/http"
)

// BuildCreatePaisRequest instantiates a HTTP request object with method and
// path set to call the "pais" service "create_pais" endpoint
func (c *Client) BuildCreatePaisRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CreatePaisPaisPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("pais", "create_pais", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCreatePaisRequest returns an encoder for requests sent to the pais
// create_pais server.
func EncodeCreatePaisRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*pais.CreatePaisDTO)
		if !ok {
			return goahttp.ErrInvalidType("pais", "create_pais", "*pais.CreatePaisDTO", v)
		}
		body := NewCreatePaisRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("pais", "create_pais", err)
		}
		return nil
	}
}

// DecodeCreatePaisResponse returns a decoder for responses returned by the
// pais create_pais endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeCreatePaisResponse may return the following errors:
//	- "invalid_fields" (type *goa.ServiceError): http.StatusBadRequest
//	- error: internal error
func DecodeCreatePaisResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			var (
				body CreatePaisResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("pais", "create_pais", err)
			}
			err = ValidateCreatePaisResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("pais", "create_pais", err)
			}
			res := NewCreatePaisPaisDTOCreated(&body)
			return res, nil
		case http.StatusBadRequest:
			var (
				body CreatePaisInvalidFieldsResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("pais", "create_pais", err)
			}
			err = ValidateCreatePaisInvalidFieldsResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("pais", "create_pais", err)
			}
			return nil, NewCreatePaisInvalidFields(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("pais", "create_pais", resp.StatusCode, string(body))
		}
	}
}
