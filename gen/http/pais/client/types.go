// Code generated by goa v3.2.5, DO NOT EDIT.
//
// pais HTTP client types
//
// Command:
// $ goa gen github.com/selmison/dojo-1/design

package client

import (
	pais "github.com/selmison/dojo-1/gen/pais"
	goa "goa.design/goa/v3/pkg"
)

// CreatePaisRequestBody is the type of the "pais" service "create_pais"
// endpoint HTTP request body.
type CreatePaisRequestBody struct {
	Nome string `form:"nome" json:"nome" xml:"nome"`
}

// CreatePaisResponseBody is the type of the "pais" service "create_pais"
// endpoint HTTP response body.
type CreatePaisResponseBody struct {
	ID   *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Nome *string `form:"nome,omitempty" json:"nome,omitempty" xml:"nome,omitempty"`
}

// CreatePaisInvalidFieldsResponseBody is the type of the "pais" service
// "create_pais" endpoint HTTP response body for the "invalid_fields" error.
type CreatePaisInvalidFieldsResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// NewCreatePaisRequestBody builds the HTTP request body from the payload of
// the "create_pais" endpoint of the "pais" service.
func NewCreatePaisRequestBody(p *pais.CreatePaisDTO) *CreatePaisRequestBody {
	body := &CreatePaisRequestBody{
		Nome: p.Nome,
	}
	return body
}

// NewCreatePaisPaisDTOCreated builds a "pais" service "create_pais" endpoint
// result from a HTTP "Created" response.
func NewCreatePaisPaisDTOCreated(body *CreatePaisResponseBody) *pais.PaisDTO {
	v := &pais.PaisDTO{
		ID:   *body.ID,
		Nome: *body.Nome,
	}

	return v
}

// NewCreatePaisInvalidFields builds a pais service create_pais endpoint
// invalid_fields error.
func NewCreatePaisInvalidFields(body *CreatePaisInvalidFieldsResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// ValidateCreatePaisResponseBody runs the validations defined on
// create_pais_response_body
func ValidateCreatePaisResponseBody(body *CreatePaisResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Nome == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("nome", "body"))
	}
	return
}

// ValidateCreatePaisInvalidFieldsResponseBody runs the validations defined on
// create_pais_invalid_fields_response_body
func ValidateCreatePaisInvalidFieldsResponseBody(body *CreatePaisInvalidFieldsResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}
