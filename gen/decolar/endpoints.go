// Code generated by goa v3.2.5, DO NOT EDIT.
//
// decolar endpoints
//
// Command:
// $ goa gen github.com/selmison/dojo-1/design

package decolar

import (
	"context"

	"github.com/go-kit/kit/endpoint"
)

// Endpoints wraps the "decolar" service endpoints.
type Endpoints struct {
	CreatePais      endpoint.Endpoint
	CreateCompania  endpoint.Endpoint
	CreateAeroporto endpoint.Endpoint
}

// NewEndpoints wraps the methods of the "decolar" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		CreatePais:      NewCreatePaisEndpoint(s),
		CreateCompania:  NewCreateCompaniaEndpoint(s),
		CreateAeroporto: NewCreateAeroportoEndpoint(s),
	}
}

// Use applies the given middleware to all the "decolar" service endpoints.
func (e *Endpoints) Use(m func(endpoint.Endpoint) endpoint.Endpoint) {
	e.CreatePais = m(e.CreatePais)
	e.CreateCompania = m(e.CreateCompania)
	e.CreateAeroporto = m(e.CreateAeroporto)
}

// NewCreatePaisEndpoint returns an endpoint function that calls the method
// "create_pais" of service "decolar".
func NewCreatePaisEndpoint(s Service) endpoint.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*CreatePaisDTO)
		return s.CreatePais(ctx, p)
	}
}

// NewCreateCompaniaEndpoint returns an endpoint function that calls the method
// "create_compania" of service "decolar".
func NewCreateCompaniaEndpoint(s Service) endpoint.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*CreateCompaniaDTO)
		return s.CreateCompania(ctx, p)
	}
}

// NewCreateAeroportoEndpoint returns an endpoint function that calls the
// method "create_aeroporto" of service "decolar".
func NewCreateAeroportoEndpoint(s Service) endpoint.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*CreateAeroportoDTO)
		return s.CreateAeroporto(ctx, p)
	}
}
